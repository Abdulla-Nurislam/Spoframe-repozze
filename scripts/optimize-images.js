const fs = require('fs').promises;
const path = require('path');
const sharp = require('sharp');
const imagemin = require('imagemin');
const imageminWebp = require('imagemin-webp');
const imageminMozjpeg = require('imagemin-mozjpeg');
const imageminPngquant = require('imagemin-pngquant');

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const imageDirectories = [
    'src/client/assets/images', 
    'public/images'
];

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
const supportedFormats = ['.jpg', '.jpeg', '.png', '.gif'];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const JPEG_QUALITY = 80;
const PNG_QUALITY = 80;
const WEBP_QUALITY = 75;

// –¶–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const sizes = [
    { width: 1920, suffix: 'xl' },
    { width: 1280, suffix: 'lg' },
    { width: 768, suffix: 'md' },
    { width: 480, suffix: 'sm' }
];

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
 */
async function optimizeImages() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    let totalOriginalSize = 0;
    let totalOptimizedSize = 0;
    let totalFiles = 0;
    
    for (const dir of imageDirectories) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            try {
                await fs.access(dir);
            } catch (error) {
                console.log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...`);
                await fs.mkdir(dir, { recursive: true });
                continue;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            const files = await fs.readdir(dir);
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const optimizedDir = path.join(dir, 'optimized');
            try {
                await fs.access(optimizedDir);
            } catch (error) {
                await fs.mkdir(optimizedDir, { recursive: true });
            }
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const webpDir = path.join(dir, 'webp');
            try {
                await fs.access(webpDir);
            } catch (error) {
                await fs.mkdir(webpDir, { recursive: true });
            }
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const responsiveDir = path.join(dir, 'responsive');
            try {
                await fs.access(responsiveDir);
            } catch (error) {
                await fs.mkdir(responsiveDir, { recursive: true });
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for (const file of files) {
                const filePath = path.join(dir, file);
                const fileExt = path.extname(file).toLowerCase();
                const fileName = path.parse(file).name;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                if (!supportedFormats.includes(fileExt)) {
                    continue;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                const stats = await fs.stat(filePath);
                if (!stats.isFile()) {
                    continue;
                }
                
                totalFiles++;
                
                console.log(`\nüì∏ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ${filePath}...`);
                
                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                const originalSize = stats.size;
                totalOriginalSize += originalSize;
                
                try {
                    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    const optimizedFilePath = path.join(optimizedDir, file);
                    
                    if (fileExt === '.jpg' || fileExt === '.jpeg') {
                        await sharp(filePath)
                            .jpeg({ 
                                quality: JPEG_QUALITY, 
                                progressive: true,
                                mozjpeg: true
                            })
                            .toFile(optimizedFilePath);
                    } else if (fileExt === '.png') {
                        await sharp(filePath)
                            .png({ 
                                quality: PNG_QUALITY, 
                                progressive: true,
                                compressionLevel: 9,
                                adaptiveFiltering: true,
                                palette: true
                            })
                            .toFile(optimizedFilePath);
                    } else if (fileExt === '.gif') {
                        // –ö–æ–ø–∏—Ä—É–µ–º GIF –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (sharp –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é GIF)
                        await fs.copyFile(filePath, optimizedFilePath);
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é
                    const webpFilePath = path.join(webpDir, `${fileName}.webp`);
                    await sharp(filePath)
                        .webp({ 
                            quality: WEBP_QUALITY,
                            reductionEffort: 6
                        })
                        .toFile(webpFilePath);
                    
                    // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    for (const size of sizes) {
                        const responsiveFilePath = path.join(
                            responsiveDir, 
                            `${fileName}-${size.suffix}${fileExt}`
                        );
                        
                        await sharp(filePath)
                            .resize(size.width, null, {
                                fit: 'inside',
                                withoutEnlargement: true
                            })
                            .jpeg({ quality: JPEG_QUALITY, progressive: true })
                            .toFile(responsiveFilePath);
                        
                        // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                        const responsiveWebpFilePath = path.join(
                            responsiveDir, 
                            `${fileName}-${size.suffix}.webp`
                        );
                        
                        await sharp(filePath)
                            .resize(size.width, null, {
                                fit: 'inside',
                                withoutEnlargement: true
                            })
                            .webp({ quality: WEBP_QUALITY })
                            .toFile(responsiveWebpFilePath);
                    }
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    const optimizedStats = await fs.stat(optimizedFilePath);
                    const optimizedSize = optimizedStats.size;
                    totalOptimizedSize += optimizedSize;
                    
                    const webpStats = await fs.stat(webpFilePath);
                    const webpSize = webpStats.size;
                    
                    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    const originalSizeFormatted = formatSize(originalSize);
                    const optimizedSizeFormatted = formatSize(optimizedSize);
                    const webpSizeFormatted = formatSize(webpSize);
                    
                    const optimizedSavingsPercent = Math.round((1 - optimizedSize / originalSize) * 100);
                    const webpSavingsPercent = Math.round((1 - webpSize / originalSize) * 100);
                    
                    console.log(`  –û—Ä–∏–≥–∏–Ω–∞–ª: ${originalSizeFormatted}`);
                    console.log(`  –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${optimizedSizeFormatted} (${optimizedSavingsPercent}% —ç–∫–æ–Ω–æ–º–∏—è)`);
                    console.log(`  WebP: ${webpSizeFormatted} (${webpSavingsPercent}% —ç–∫–æ–Ω–æ–º–∏—è)`);
                    console.log(`  –°–æ–∑–¥–∞–Ω—ã –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤: ${sizes.map(s => s.suffix).join(', ')}`);
                } catch (error) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${filePath}:`, error);
                }
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error);
        }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (totalFiles > 0) {
        const totalSavingsPercent = Math.round((1 - totalOptimizedSize / totalOriginalSize) * 100);
        console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
        console.log(`  –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${formatSize(totalOriginalSize)}`);
        console.log(`  –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${formatSize(totalOptimizedSize)}`);
        console.log(`  –≠–∫–æ–Ω–æ–º–∏—è: ${formatSize(totalOriginalSize - totalOptimizedSize)} (${totalSavingsPercent}%)`);
    }
    
    console.log('\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
 * @param {number} bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
 */
function formatSize(bytes) {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(2) + ' MB';
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
optimizeImages().catch(error => {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
}); 